#nullable enable

using System.Diagnostics.CodeAnalysis;

namespace Definit.Results;

public interface IUnionInfo<T0, T1, T2, T3, T4, T5, T6, T7, T8> : IUnionBase<(Or<T0>?, Or<T1>?, Or<T2>?, Or<T3>?, Or<T4>?, Or<T5>?, Or<T6>?, Or<T7>?, Or<T8>?)>
	where T0 : notnull
	where T1 : notnull
	where T2 : notnull
	where T3 : notnull
	where T4 : notnull
	where T5 : notnull
	where T6 : notnull
	where T7 : notnull
	where T8 : notnull;

public readonly struct U<T0, T1, T2, T3, T4, T5, T6, T7, T8> : U<T0, T1, T2, T3, T4, T5, T6, T7, T8>.Base
	where T0 : notnull
	where T1 : notnull
	where T2 : notnull
	where T3 : notnull
	where T4 : notnull
	where T5 : notnull
	where T6 : notnull
	where T7 : notnull
	where T8 : notnull 
{
    public interface Base : IUnionInfo<T0, T1, T2, T3, T4, T5, T6, T7, T8>;

    public (Or<T0>?, Or<T1>?, Or<T2>?, Or<T3>?, Or<T4>?, Or<T5>?, Or<T6>?, Or<T7>?, Or<T8>?) Value { get; }
	
	[Obsolete(DefaultConstructorException.Attribute, true)]
	public U() => throw new DefaultConstructorException();
	
	public U(T0 value) => Value = (value!, null, null, null, null, null, null, null, null);
	public U(T1 value) => Value = (null, value!, null, null, null, null, null, null, null);
	public U(T2 value) => Value = (null, null, value!, null, null, null, null, null, null);
	public U(T3 value) => Value = (null, null, null, value!, null, null, null, null, null);
	public U(T4 value) => Value = (null, null, null, null, value!, null, null, null, null);
	public U(T5 value) => Value = (null, null, null, null, null, value!, null, null, null);
	public U(T6 value) => Value = (null, null, null, null, null, null, value!, null, null);
	public U(T7 value) => Value = (null, null, null, null, null, null, null, value!, null);
	public U(T8 value) => Value = (null, null, null, null, null, null, null, null, value!);
	
	public static implicit operator U<T0, T1, T2, T3, T4, T5, T6, T7, T8>([DisallowNull] Definit.Results.UnionMatchError _) => throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>();
	
	public static implicit operator U<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T0 value) => new (value);
	public static implicit operator U<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T1 value) => new (value);
	public static implicit operator U<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T2 value) => new (value);
	public static implicit operator U<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T3 value) => new (value);
	public static implicit operator U<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T4 value) => new (value);
	public static implicit operator U<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T5 value) => new (value);
	public static implicit operator U<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T6 value) => new (value);
	public static implicit operator U<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T7 value) => new (value);
	public static implicit operator U<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T8 value) => new (value);
	
	public void Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Action<T8> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    switch8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Action<T7> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    switch7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Action<T6> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    switch6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Action<T5> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    switch5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Action<T4> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    switch4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Action<T3> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    switch3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Action<T2> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    switch2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Action<T1> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    switch1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Action<T0> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    switch0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task Switch<TReturn>
	(
	    Func<Async, T0, Task> switch0,
		Func<Async, T1, Task> switch1,
		Func<Async, T2, Task> switch2,
		Func<Async, T3, Task> switch3,
		Func<Async, T4, Task> switch4,
		Func<Async, T5, Task> switch5,
		Func<Async, T6, Task> switch6,
		Func<Async, T7, Task> switch7,
		Func<Async, T8, Task> switch8,
	    Action<System.Exception> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    await switch0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    await switch1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    await switch2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    await switch3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    await switch4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    await switch5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    await switch6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    await switch7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    await switch8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public TReturn Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<T8, TReturn> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return match8(_arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<T7, TReturn> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return match7(_arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<T6, TReturn> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return match6(_arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<T5, TReturn> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return match5(_arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<T4, TReturn> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return match4(_arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<T3, TReturn> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return match3(_arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<T2, TReturn> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return match2(_arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<T1, TReturn> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return match1(_arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<T0, TReturn> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return match0(_arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
	
	public async Task<TReturn> Match<TReturn>
	(
	    Func<Async, T0, Task<TReturn>> match0,
		Func<Async, T1, Task<TReturn>> match1,
		Func<Async, T2, Task<TReturn>> match2,
		Func<Async, T3, Task<TReturn>> match3,
		Func<Async, T4, Task<TReturn>> match4,
		Func<Async, T5, Task<TReturn>> match5,
		Func<Async, T6, Task<TReturn>> match6,
		Func<Async, T7, Task<TReturn>> match7,
		Func<Async, T8, Task<TReturn>> match8,
	    Func<System.Exception, TReturn> onException
	)
	{
	    try
	    {
	        var (_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8) = this.Value;
	
	        if (_arg0 is not null)
			{
			    return await match0(Async.Instance, _arg0.Value.Out);
			}
			
			if (_arg1 is not null)
			{
			    return await match1(Async.Instance, _arg1.Value.Out);
			}
			
			if (_arg2 is not null)
			{
			    return await match2(Async.Instance, _arg2.Value.Out);
			}
			
			if (_arg3 is not null)
			{
			    return await match3(Async.Instance, _arg3.Value.Out);
			}
			
			if (_arg4 is not null)
			{
			    return await match4(Async.Instance, _arg4.Value.Out);
			}
			
			if (_arg5 is not null)
			{
			    return await match5(Async.Instance, _arg5.Value.Out);
			}
			
			if (_arg6 is not null)
			{
			    return await match6(Async.Instance, _arg6.Value.Out);
			}
			
			if (_arg7 is not null)
			{
			    return await match7(Async.Instance, _arg7.Value.Out);
			}
			
			if (_arg8 is not null)
			{
			    return await match8(Async.Instance, _arg8.Value.Out);
			} 
	
	    }
	    catch (System.Exception exception)
	    {
	        return onException(exception);
	    }
	
	    throw new Definit.Results.UnionMatchException<U<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(); 
	}
}

public static class Extensions_U_9
{
    public static void Deconstruct<T0, T1, T2, T3, T4, T5, T6, T7, T8>
	(
	    this U<T0, T1, T2, T3, T4, T5, T6, T7, T8> either,
	    out U<T0, T1, T2, T3, T4>? _arg_0,
		out U<T5, T6, T7, T8>? _arg_1
	)
		where T0 : notnull
		where T1 : notnull
		where T2 : notnull
		where T3 : notnull
		where T4 : notnull
		where T5 : notnull
		where T6 : notnull
		where T7 : notnull
		where T8 : notnull
	{
	    var (_out_0, _out_1, _out_2, _out_3, _out_4, _out_5, _out_6, _out_7, _out_8) = either.Value;
	    _arg_0 = _out_0 is not null ? new (_out_0.Value.Out) : _out_1 is not null ? new (_out_1.Value.Out) : _out_2 is not null ? new (_out_2.Value.Out) : _out_3 is not null ? new (_out_3.Value.Out) : _out_4 is not null ? new (_out_4.Value.Out) : null;
		_arg_1 = _out_5 is not null ? new (_out_5.Value.Out) : _out_6 is not null ? new (_out_6.Value.Out) : _out_7 is not null ? new (_out_7.Value.Out) : _out_8 is not null ? new (_out_8.Value.Out) : null;
	}
	
	public static void Deconstruct<T0, T1, T2, T3, T4, T5, T6, T7, T8>
	(
	    this U<T0, T1, T2, T3, T4, T5, T6, T7, T8>? either,
	    out U<T0, T1, T2, T3, T4>? _arg_0,
		out U<T5, T6, T7, T8>? _arg_1
	)
		where T0 : notnull
		where T1 : notnull
		where T2 : notnull
		where T3 : notnull
		where T4 : notnull
		where T5 : notnull
		where T6 : notnull
		where T7 : notnull
		where T8 : notnull
	{
	    if(either is null)
	    {
	        _arg_0 = null; _arg_1 = null;
	        return;
	    }
	
	    var (_out_0, _out_1, _out_2, _out_3, _out_4, _out_5, _out_6, _out_7, _out_8) = either.Value.Value;
	    _arg_0 = _out_0 is not null ? new (_out_0.Value.Out) : _out_1 is not null ? new (_out_1.Value.Out) : _out_2 is not null ? new (_out_2.Value.Out) : _out_3 is not null ? new (_out_3.Value.Out) : _out_4 is not null ? new (_out_4.Value.Out) : null;
		_arg_1 = _out_5 is not null ? new (_out_5.Value.Out) : _out_6 is not null ? new (_out_6.Value.Out) : _out_7 is not null ? new (_out_7.Value.Out) : _out_8 is not null ? new (_out_8.Value.Out) : null;
	}
}