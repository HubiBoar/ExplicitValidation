using Definit.Results;
using Examples;

namespace NewApproach;

public partial record UserData
(
    string Name,
    Email Email,
    Address Address
)
: IIsValid;

public partial record Address
(
    string PostalCode,
    Email EmailProp
)
: IIsValid;

public static class ExampleObject
{
    private static async Task<Result> Endpoint(UserData body)
    {
        if(body.IsValid().Is(out Error error).Else(out var valid))
        {
            return error;
        }

        return await Run(valid.Address());
    }

    private static async Task<Result> Run(Valid<Address> valid)
    {
        await Task.CompletedTask;
        return Result.Success;
    }
}


//AutoGenerated

partial record UserData
{
    public Result Validate2()
    {
        return IsValid();
    }

    public Result<Valid> IsValid()
    {
        return Valid.Create(this);
    }

    public readonly struct Valid
    {
        public UserData Value { get; }

        public Address.Valid Address { get; } 
        public Email.Valid Email { get; } 

        private Valid(UserData value, Address.Valid address, Email.Valid email)
        {
            Value = value;
            Address = address;
            Email = email;
        }

        public static Result<Valid> Create(UserData value)
        {
            List<(string Error, string PropertyName)> errors = [];

            if(value.Address.IsValid().Is(out Error error).Else(out var valid_Address)
            {
                errors.Add((error.Message, "Address")); 
            }

            if(value.Email.IsValid().Is(out error).Else(out var valid_Email)
            {
                errors.Add((error.Message, "Email")); 
            }

            if(errors.Count > 0)
            {
                return new Error(string.Join(" :: ", errors.Select(x => $"{x.PropertyName} => {x.Error}")));
            }

            return new Valid(value, valid_Address, valid_Email);
        }
    }
}
