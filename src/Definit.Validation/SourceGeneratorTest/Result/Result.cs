namespace Definit.Results.NewApproach;

[System.AttributeUsage(System.AttributeTargets.Struct, AllowMultiple = false)]
public sealed class GenerateResultAttribute : Attribute;

public static partial class GenerateResult
{
    [System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple = false)]
    internal sealed class BaseAttribute : Attribute;
}

public static class ResultHelper
{
    public static T ToReturn<TResult, T>(TResult result)
        where T : struct, IEitherBase 
        where TResult : IResultBase<T>
    {
        return result.Value;
    }

    public static T ToReturn<TResult, T>(Exception exception)
        where T : struct, IEitherBase 
        where TResult : IResultBase<T>
    {
        return TResult.FromException(exception);
    }
}

public interface IResultBase<TValue>
    where TValue : struct, IEitherBase
{
    internal TValue Value { get; }

    internal static abstract TValue FromException(Exception exception);
}


[GenerateResult.Base]
public partial interface IResult<T0, T1>;

//AutoGenerated
public partial interface IResult<T0, T1>  : IResultBase<Either<T0, T1>>
    where T0 : notnull
    where T1 : notnull;

public readonly struct Result<T0, T1> : IResult<T0, T1> 
    where T0 : notnull
    where T1 : struct, IError<T1>
{
    private Either<T0, T1> Either { get; }

    [Obsolete(DefaultConstructorException.Attribute, true)]
    public Result() => throw new DefaultConstructorException();

    public Result(Either<T0, T1> value) => Either = value;

    Either<T0, T1> IResultBase<Either<T0, T1>>.Value => Either;

    static Either<T0, T1> IResultBase<Either<T0, T1>>.FromException(Exception exception)
    {
        return T1.Matches(exception).Error;
    }

    public static implicit operator Result<T0, T1>(T0 value) => new (value); 
    public static implicit operator Result<T0, T1>(T1 value) => new (value);

    public static implicit operator Result<T0, T1>(Either<T0, T1> value) => new (value);
    public static implicit operator Result<T0, T1>(Either<T1, T0> value) => new (value);
}
